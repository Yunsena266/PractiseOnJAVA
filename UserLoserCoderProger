/*

Напишите программу, которая определит, чем заняться тому или иному человеку.
Для этого нужно:
Ввести [в цикле] с клавиатуры несколько строк (ключей).
Строки (ключи) могут быть такими: "user", "loser", "coder", "proger".
Ввод окончен, когда строка не совпадает ни с одной из выше указанных.
Для каждой введенной строки нужно:
  Создать соответствующий объект, например, для строки "user" нужно создать объект класса User.
  Передать этот объект в метод doWork.
  Написать реализацию метода doWork, который:
      Вызывает метод live() у переданного объекта, если этот объект (person) имеет тип User.
      Вызывает метод doNothing(), если person имеет тип Loser.
      Вызывает метод writeCode(), если person имеет тип Coder.
      Вызывает метод enjoy(), если person имеет тип Proger.
*/

package TasksOnJava;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/* 
User, Loser, Coder and Proger
*/

public class Solution {
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Person person = null;
        String key = null;
        while ( true)
        //тут цикл по чтению ключей, пункт 1
        {
            key = reader.readLine();
            if (!(key.equals("user") |
        key.equals("loser") |
        key.equals("coder") |
        key.equals("proger") )) {
            break;
        } else {
            if (key.equals("user")) {
                 person  = new  Person.User ();
            } else if (key.equals("loser")) {
                 person  = new  Person.Loser ();
            } else if (key.equals("coder")) {
                 person  = new  Person.Coder ();
            } else if (key.equals("proger")) {
                 person  = new  Person.Proger ();
            }
        }
            doWork(person); //вызываем doWork

        }
    }

    public static void doWork(Person person) {
        if (person instanceof Person.User) {
            Person.User pers = (Person.User) person;
            pers .live() ;
            
        } else if (person instanceof Person.Loser) {
            Person.Loser pers = (Person.Loser) person;
            pers.doNothing() ;
            
        } else if (person instanceof Person.Coder) {
            Person.Coder pers = (Person.Coder) person;
            pers.writeCode() ;
            
        } else {
            Person.Proger pers = (Person.Proger) person;
            pers.enjoy() ;
        }
    }
    public interface Person {
    class User implements Person {
        void live() {
            System.out.println("I usually just live.");
        }
    }

    class Loser implements Person {
        void doNothing() {
            System.out.println("I usually do nothing.");
        }
    }

    class Coder implements Person {
        void writeCode() {
            System.out.println("I usually write code.");
        }
    }

    class Proger implements Person {
        void enjoy() {
            System.out.println("It's a wonderful life!");
        }
    }

}
}
